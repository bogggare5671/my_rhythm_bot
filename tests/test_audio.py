# tests/test_audio.py

import os
import sys
import time
import wave
import struct
import math
import subprocess
import random

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ game
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, BASE_DIR)

from game.audio import play_sound


def generate_tone(path, frequency=440, duration=1.0, framerate=44100, amplitude=32767):
    """
    Generate a sine wave tone and save to the given path as a WAV file.
    """
    nframes = int(framerate * duration)
    with wave.open(path, 'wb') as wf:
        wf.setnchannels(1)
        wf.setsampwidth(2)
        wf.setframerate(framerate)
        for i in range(nframes):
            sample = int(amplitude * math.sin(2 * math.pi * frequency * i / framerate))
            wf.writeframes(struct.pack('<h', sample))


def get_duration(path):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å WAV-—Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö; –¥–ª—è MP3 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1.0 —Å–µ–∫.
    """
    if path.lower().endswith('.wav'):
        try:
            with wave.open(path, 'rb') as wf:
                frames = wf.getnframes()
                rate = wf.getframerate()
                return frames / float(rate)
        except wave.Error:
            return 1.0
    return 1.0


if __name__ == '__main__':
    # --- –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞ ---
    fon_dir = os.path.join(BASE_DIR, 'fon')
    bg_files = [f for f in os.listdir(fon_dir) if f.lower().endswith(('.wav', '.mp3'))]
    if bg_files:
        bg_choice = random.choice(bg_files)
        music_path = os.path.join(fon_dir, bg_choice)
        try:
            bg_proc = subprocess.Popen(
                ['mpg123', '-q', '--loop', '0', music_path],
                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
            )
            print(f"üéµ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞: {bg_choice}")
        except FileNotFoundError:
            print("‚ö†Ô∏è mpg123 –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É")
    else:
        print(f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ fon –Ω–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {fon_dir}")

    try:
        # --- –¢–µ—Å—Ç: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–Ω –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º ---
        print("‚ñ∂ Generating 1-second sine tone at 440Hz...")
        tone_path = os.path.join('/tmp', 'tone440.wav')
        generate_tone(tone_path)
        print(f"‚úì Tone generated at {tone_path}")

        print("‚ñ∂ Playing generated tone...")
        play_sound(tone_path)
        time.sleep(get_duration(tone_path) + 1)

        # --- –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–≤—É–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã ---
        sounds_dir = os.path.join(BASE_DIR, 'sounds')
        print(f"‚ñ∂ Testing existing sound files in {sounds_dir}")

        if not os.path.isdir(sounds_dir):
            print(f"‚ö†Ô∏è Sounds directory not found: {sounds_dir}")
        else:
            for snd in os.listdir(sounds_dir):
                if snd.lower().endswith(('.wav', '.mp3')):
                    path = os.path.join(sounds_dir, snd)
                    print(f"‚ñ∂ Playing {snd}...")
                    try:
                        play_sound(path)
                        duration = get_duration(path)
                        time.sleep(duration + 1)
                    except Exception as e:
                        print(f"‚ùå Error playing {snd}: {e}")
    finally:
        # --- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏ ---
        try:
            bg_proc.terminate()
            print("üõë –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except NameError:
            pass

    print("‚úÖ Audio test complete")
